"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const child_process_1 = require("child_process");
const buildUitls_1 = require("./buildUitls");
const compiler_1 = require("./compiler");
const CONTAINER_PATH = '/home/project';
const NPM_PATH = '/home/npm';
function compileDocker(config) {
    return async function compile(sources) {
        const command = createBuildCommand(config);
        const input = JSON.stringify(buildUitls_1.buildInputObject(sources, config.compilerOptions), null, 2);
        return JSON.parse(child_process_1.execSync(command, { input, maxBuffer: compiler_1.solcOutputMaxBuffer }).toString());
    };
}
exports.compileDocker = compileDocker;
function createBuildCommand(config) {
    const configTag = config.compilerVersion;
    const tag = configTag ? `:${configTag}` : ':stable';
    const allowedPaths = `"${CONTAINER_PATH},${NPM_PATH}"`;
    return `docker run ${getVolumes(config)} -i -a stdin -a stdout ` +
        `ethereum/solc${tag} solc --standard-json --allow-paths ${allowedPaths}`;
}
exports.createBuildCommand = createBuildCommand;
function getVolumes(config) {
    const hostPath = process.cwd();
    const hostNpmPath = path_1.join(hostPath, config.nodeModulesDirectory);
    return `-v ${hostPath}:${CONTAINER_PATH} -v ${hostNpmPath}:${NPM_PATH}`;
}
exports.getVolumes = getVolumes;
