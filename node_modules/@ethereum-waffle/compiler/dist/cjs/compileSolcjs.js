"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const solc_1 = __importDefault(require("solc"));
const util_1 = require("util");
const utils_1 = require("./utils");
const buildUitls_1 = require("./buildUitls");
const node_fetch_1 = __importDefault(require("node-fetch"));
const loadRemoteVersion = util_1.promisify(solc_1.default.loadRemoteVersion);
const semverRegex = /^\d+\.\d+\.\d+$/;
async function loadCompiler(config) {
    if (config.compilerVersion !== 'default') {
        if (utils_1.isDirectory(config.compilerVersion)) {
            return require(utils_1.relativePathToWorkingDir(config.compilerVersion));
        }
        else if (semverRegex.test(config.compilerVersion)) {
            try {
                const version = await resolveSemverVersion(config.compilerVersion);
                return loadRemoteVersion(version);
            }
            catch (e) {
                throw new Error(`Error fetching version: ${config.compilerVersion}.`);
            }
        }
        return loadRemoteVersion(config.compilerVersion);
    }
    return solc_1.default;
}
exports.loadCompiler = loadCompiler;
async function resolveSemverVersion(version) {
    const releases = await fetchReleases();
    const item = releases[version];
    return item.substring('soljson-'.length, item.length - '.js'.length);
}
const VERSION_LIST_URL = 'https://ethereum.github.io/solc-bin/bin/list.json';
let cache = undefined;
async function fetchReleases() {
    if (!cache) {
        const res = await node_fetch_1.default(VERSION_LIST_URL);
        const { releases } = await res.json();
        cache = releases;
    }
    return cache;
}
function compileSolcjs(config) {
    return async function compile(sources, findImports) {
        const solc = await loadCompiler(config);
        const input = buildUitls_1.buildInputObject(sources, config.compilerOptions);
        const output = solc.compile(JSON.stringify(input), { imports: findImports });
        return JSON.parse(output);
    };
}
exports.compileSolcjs = compileSolcjs;
function findInputs(files) {
    return Object.assign({}, ...files.map((file) => ({
        [file]: utils_1.readFileContent(file)
    })));
}
exports.findInputs = findInputs;
